class GISDBProvider
!!!139139.cpp!!!	GISCreateBufferPoint(in x : double, in y : double, in ibuffer : int) : OGRGeometry
	OGRPoint myPoint;
	myPoint.setX (x);
	myPoint.setY (y);
	
	// show in the log
	//wxLogMessage (_("Selected point : %.*f, %.*f, buffer = %d"),2,x,2,y,ibuffer);
	
	return myPoint.Buffer(ibuffer, 20);
!!!139267.cpp!!!	GISSearchLines(inout layer : OGRLayer, inout pointbuffer : OGRGeometry, inout iFID : int) : OGRGeometry
	// layer not used...
	
	iFID = 0;
	//int i=0;
	//bool bStatus = FALSE;
	//		
	//OGRFeature *poFeature;
	OGRGeometry *iterateGeometry;
	MYSQL_ROW row;
	tmArrayULong row_length;

	// results are aleready created by setting spatial filter
	// now we iterate through the selected lines
	
	while (m_pActiveDB->DataBaseGetNextRowResult(row, row_length))
	{
		iterateGeometry = GISCreateDataBaseGeometry(row, row_length, 1);
		if (iterateGeometry != NULL)
		{
			if(pointbuffer->Intersect(iterateGeometry))
			{
				// get the FID
				iFID = atoi(row[0]);
				return iterateGeometry;
			}
		}
		
	}
	
	return NULL;
!!!139395.cpp!!!	GISDBProvider()
	//m_NumOfVector		= 0;
	m_pLayer			= NULL;
	m_pDatasource		= NULL;
	m_iFeatureLoop		= 0;
	m_LayerName			= _T("");
	
!!!139523.cpp!!!	~GISDBProvider()
	
!!!139651.cpp!!!	GISOpen(in filename : wxString) : bool
	
	m_pDatasource = OGRSFDriverRegistrar::Open(filename.ToAscii(), TRUE );
    if( m_pDatasource != NULL )
    {
		GISDataProvider::GISOpen(filename);
//		m_pLayer = m_pDatasource->GetLayer(0);
//		m_pLayer->ResetReading();
		
		wxLogDebug(_T("Opening Database vector file OK"));
		return TRUE;
    }
	
	// if we couldn't open the vector file try to know why
	// ERROR WITH WINDOWS WHY ???
	const char * myError; // = CPLGetLastErrorMsg();
	wxString myErrMsg = wxString::FromAscii(myError);
	wxLogDebug(_T("Open vector failed for file %s, error msg is : %s"), 
			   filename.c_str(), myErrMsg.c_str());
	return FALSE;
!!!139779.cpp!!!	GISOpen(inout handle : DataBase) : bool
	if (handle != NULL)
	{
		m_pActiveDB = handle;
		GISDataProvider::GISOpen(m_pActiveDB->DataBaseGetName());
		return TRUE;
		
	}
	wxLogDebug(_T("Database handle is null..."));
	return FALSE;
	
!!!139907.cpp!!!	GISGetExtend() : OGREnvelope
	OGREnvelope * psExtent = new OGREnvelope();
	OGREnvelope oEnv;
	MYSQL_ROW row;
	tmArrayULong row_length;
	
	// query for the geometry enveloppe for all lines
	wxString sSentence = _T("SELECT Envelope(OBJECT_GEOMETRY) FROM ") + m_LayerName;
	wxLogDebug(m_LayerName);
	if (m_pActiveDB->DataBaseQuery(sSentence)==false)
	{
		wxLogDebug(_T("Error computing extend"));
		m_pActiveDB->DataBaseClearResults();
		return NULL;
	}
	
	
	// init extend based on the first object
	// to avoid 0 values for Xmin.
	if(m_pActiveDB->DataBaseGetNextRowResult(row, row_length)==false)
	{
		m_pActiveDB->DataBaseClearResults();
		return NULL;
	}
	
	OGRGeometry *poGeometry = GISCreateDataBaseGeometry(row, row_length);
	poGeometry->getEnvelope(&oEnv);
	psExtent->MinX = oEnv.MinX;
	psExtent->MinY = oEnv.MinY;
	delete poGeometry;
	
	// loop all lines
	while (m_pActiveDB->DataBaseGetNextRowResult(row, row_length)==true)
	{
		wxASSERT(row_length.GetCount() > 0);
		// compute the geometry and get the xmin xmax, ymin, ymax
		OGRGeometry *poGeometry = GISCreateDataBaseGeometry(row, row_length);
		if ( poGeometry != NULL )
		{
			poGeometry->getEnvelope(&oEnv);
			if (oEnv.MinX < psExtent->MinX) 
				psExtent->MinX = oEnv.MinX;
			if (oEnv.MinY < psExtent->MinY) 
				psExtent->MinY = oEnv.MinY;
			if (oEnv.MaxX > psExtent->MaxX) 
				psExtent->MaxX = oEnv.MaxX;
			if (oEnv.MaxY > psExtent->MaxY) 
				psExtent->MaxY = oEnv.MaxY;
		}
		delete poGeometry;
	}
	return psExtent;
!!!140035.cpp!!!	GISGetFeatureCount() : long
	wxString sSentence = wxString::Format(_T("SELECT  COUNT(*) FROM %s"),
										  m_LayerName.c_str());
	long iRetVal = wxNOT_FOUND;
	if (m_pActiveDB->DataBaseQuery(sSentence))
	{
		m_pActiveDB->DataBaseGetNextResult(iRetVal);
		m_pActiveDB->DataBaseClearResults();
	}
	return iRetVal;
!!!140163.cpp!!!	GISGetNextFeatureAsWkT(inout wkbstring : wxString) : bool
//	OGRFeature *poFeature;
//	OGRGeometry *poGeometry;
//	char * myExport;
//	
//	poFeature = m_pLayer->GetNextFeature();
//	poGeometry = poFeature->GetGeometryRef();
//	if (poGeometry != NULL)
//	{
//		if (wkbFlatten(poGeometry->getGeometryType()) == wkbLineString )
//		{
//			
//			OGRLineString * poLine = (OGRLineString *) poGeometry;
//			
//			poLine->exportToWkt(&myExport);
//			wkbstring = wxString::FromAscii(myExport);
//			delete myExport;
//		}
//		
//		wxLogDebug(_T("WKT : %s"), wkbstring.c_str());
//		
//		m_iFeatureLoop ++;
//		OGRFeature::DestroyFeature( poFeature );
//		return TRUE;
//		
//	}
//	
//	OGRFeature::DestroyFeature( poFeature );
//	wxLogDebug(_T("No Geometery / Feature found"));
	return FALSE;
!!!140291.cpp!!!	GISSetFeatureAsWkT(in wkbstring : wxString, in bComputeExtend : bool = TRUE) : bool
	//double * rect;
	OGREnvelope myEnveloppe;
	wxString sSentence = _T("");
	
	// if we must compute the bounding box for new added line
	if(bComputeExtend)
	{
		
		// check if we can compute the enveloppe (a.k.a bounding box)
		if(GISComputeBoundingBox(wkbstring, &myEnveloppe))
		{
			sSentence = wxString::Format(_T("INSERT INTO GENERIC_LINES ")
										 _T("(WKT_GEOMETRY, MINX, MINY, MAXX, MAXY)")
										 _T("VALUES (\"%s\", %f, %f, %f, %f)"),
										 wkbstring.c_str(), myEnveloppe.MinX, myEnveloppe.MinY,
										 myEnveloppe.MaxX, myEnveloppe.MaxY);
		}
		
	}
	else
	{
		sSentence = wxString::Format(_T("INSERT INTO GENERIC_LINES (WKT_GEOMETRY) VALUES (\"%s\")"),
									 wkbstring.c_str());
	}
	
	// add WKT string to the database
	// warning the table must have a WKT_GEOMETRY field
	if (m_pActiveDB->DataBaseQuery(sSentence))
	{
		return TRUE;
	}
	return FALSE;
!!!140419.cpp!!!	GISSetFeatureAsWkTBuffer(in featurelist : wxArrayString, in bComputeExtend : bool = TRUE) : bool
	OGREnvelope myEnveloppe;
	unsigned int i;
	wxString sSentence = _T("");
	
		
	
		for (i=0; i<featurelist.GetCount();i++)
		{
			sSentence.Append(wxString::Format(_T("INSERT INTO %s")
											  _T(" VALUES (-1, GeomFromText('%s')); "),
											  m_LayerName.c_str(),
											  featurelist.Item(i).c_str()));
		}

		
	//wxLogDebug(sSentence);

	if (m_pActiveDB->DataBaseQueryNoResults(sSentence) == 0)
	{
		return true;
	}
	return false;
	
	
!!!140547.cpp!!!	GISGetLayerCount() : int
	return m_pDatasource->GetLayerCount();
!!!140675.cpp!!!	GISGetLayer(in layername : wxString) : OGRLayer
//	// do not delete the returned layer... properties of datasource
//	OGRLayer * myLayer = m_pDatasource->GetLayerByName(layername.ToAscii());
//	if (myLayer == NULL)
//	{
//		wxLogDebug(_T("No layer with name : %s"), layername.c_str());
//	}
//	return myLayer;
	return NULL;
!!!140803.cpp!!!	GISSetActiveLayer(in layername : wxString) : bool
	// we check that the layer name exists
	wxString sSentence = _T("SHOW TABLES LIKE \"") + layername + _T("\"");
	
	if (m_pActiveDB->DataBaseQuery(sSentence))
	{
		// ok the table exist
		if (m_pActiveDB->DataBaseHasResults())
		{
			m_pActiveDB->DataBaseClearResults();
			m_LayerName = layername;
			return TRUE;
		}
		
	}
	// nothing returned, the layer dosen't exist.
	wxLogDebug(_T("No layer with name : %s"), layername.c_str());
	return FALSE;
!!!141059.cpp!!!	GISComputeBoundingBox(in wktstring : wxString, inout enveloppe : OGREnvelope) : bool
	OGRSpatialReference mySpatRef;
	OGRLineString * myGeom;
	bool bReturnValue = FALSE;
	//OGREnvelope myEnveloppe;

		
	std::string nomtr((char const*)wktstring.mb_str(*wxConvCurrent));
	char * mypChar = (char *) nomtr.c_str();
	
	OGRErr myErr;
	myErr = OGRGeometryFactory::createFromWkt( &mypChar, &mySpatRef, (OGRGeometry**) &myGeom);
	
	// check that a geometry was created
	if (myErr == 0)
	{
		// get the bounding box of the geometry
		myGeom->getEnvelope(enveloppe);
		bReturnValue = TRUE;
		
		// delete the geometry
		delete myGeom;
	}
	else
		wxLogDebug(_T("Unable to create geometry, error is %d"), myErr);
	
	//delete mypChar;
	return bReturnValue;
!!!141187.cpp!!!	GISComputeIndex(in fields : wxArrayString, in table : wxString) : bool
	wxString sSentence = wxString::Format(_T("CREATE SPATIAL INDEX sp_index ON %s (OBJECT_GEOMETRY);"),
										  table.c_str());
	
	
	// process the query and return true if ok
	if(m_pActiveDB->DataBaseQueryNoResults(sSentence)==true)
	{
		return true;
	}
		
	wxLogDebug(_T("Not able to create index"));
	return false;
!!!141315.cpp!!!	GISClose() : bool
	if (GISIsOpened())
	{
		//OGRDataSource::DestroyDataSource( m_pDatasource);
		GISDataProvider::GISClose();
		return TRUE;
	}
	
	wxLogDebug(_T("Unable to close, no data open."));
	return FALSE;
!!!141443.cpp!!!	GISGetFeatureByBuffer(in x : double, in y : double, in ibuffer : int, inout iFidFound : int) : OGRGeometry
	OGRGeometry * myFoundLine = NULL;
	long myRows = 0;
	
	// step one, create the buffer for point
	OGRPolygon * myBuffPoint = (OGRPolygon *) GISCreateBufferPoint(x, y, ibuffer);
	if (myBuffPoint != NULL)
	{	
		// step two, calculate  use the spatial index
		if (GISSetSpatialFilter(m_LayerName, myBuffPoint))
		{
			
			m_pActiveDB->DataBaseGetResultSize(NULL, &myRows);
			wxLogDebug(_T("Setting spatial filter OK, %d results fetched"),myRows);
			if (m_pActiveDB->DataBaseHasResults())
			{
				// step three, find the line
				myFoundLine = GISSearchLines(NULL, myBuffPoint, iFidFound);
			}
			// delete the temporary result set 
			GISDeleteSpatialFilter(NULL);

		}
	}
	
	
	return myFoundLine;
!!!141571.cpp!!!	GISSetSpatialFilter(in table : wxString, inout enveloppe : OGRGeometry) : bool
	char * myExport;
	wxString sExport = _T("");
	
	enveloppe->exportToWkt(&myExport);
	sExport = wxString::FromAscii(myExport);
	delete myExport;
	
	//SELECT * FROM generic_lines WHERE MBRIntersects(GeomFromText('POINT(540000 155000)'), OBJECT_GEOMETRY)
	wxString sSentence = wxString::Format( _T("SELECT * FROM %s WHERE ")
										  _T("MBRIntersects(GeomFromText('%s'),OBJECT_GEOMETRY)"),
										  table.c_str(), sExport.c_str());
	
	if (m_pActiveDB->DataBaseQuery(sSentence))
	{
		return TRUE;
	}
	
	return FALSE;
!!!141699.cpp!!!	GISDeleteSpatialFilter(inout templayer : OGRLayer) : bool
	m_pActiveDB->DataBaseClearResults();
	return TRUE;
!!!141827.cpp!!!	GISCreateDataBaseGeometry(inout row : MYSQL_ROW, in length : tmArrayULong, in geometry_col : int = 0) : OGRGeometry
	OGRGeometry * geometry = NULL;
	// Geometry columns will have the first 4 bytes contain the SRID.
	OGRGeometryFactory::createFromWkb(((unsigned char *)row[geometry_col]) + 4, 
												  NULL,
												  &geometry,
												  length.Item(geometry_col) - 4 );
	return geometry;
